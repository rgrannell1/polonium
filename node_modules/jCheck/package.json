{
  "_args": [
    [
      "jCheck@github:rgrannell1/jCheck",
      "/home/ryan/Code/polonium.js"
    ]
  ],
  "_from": "rgrannell1/jCheck",
  "_id": "jCheck@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/jCheck",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/rgrannell1/jCheck/master/package.json",
      "gitUrl": "git://github.com/rgrannell1/jCheck.git",
      "httpsUrl": "git+https://github.com/rgrannell1/jCheck.git",
      "shortcut": "github:rgrannell1/jCheck",
      "ssh": "git@github.com:rgrannell1/jCheck.git",
      "sshUrl": "git+ssh://git@github.com/rgrannell1/jCheck.git",
      "type": "github"
    },
    "name": "jCheck",
    "raw": "jCheck@github:rgrannell1/jCheck",
    "rawSpec": "github:rgrannell1/jCheck",
    "scope": null,
    "spec": "github:rgrannell1/jCheck",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/rgrannell1/jCheck.git#3d8d3b2381496194ddb39567bf63bcebc2e6ff6f",
  "_shasum": "85ed63afe0c8ee9e3ecedcddb6943a85e2083f92",
  "_shrinkwrap": null,
  "_spec": "jCheck@github:rgrannell1/jCheck",
  "_where": "/home/ryan/Code/polonium.js",
  "bugs": {
    "url": "https://github.com/rgrannell1/jCheck/issues"
  },
  "dependencies": {
    "is": "github:rgrannell1/is",
    "string-template": "*"
  },
  "description": "Property-based JavaScript checking.",
  "devDependencies": {},
  "gitHead": "3d8d3b2381496194ddb39567bf63bcebc2e6ff6f",
  "homepage": "https://github.com/rgrannell1/jCheck#readme",
  "main": "jCheck.js",
  "name": "jCheck",
  "optionalDependencies": {},
  "readme": "\njCheck v0.1.1 [![Build Status](https://travis-ci.org/rgrannell1/jCheck.png?branch=master)](https://travis-ci.org/rgrannell1/jCheck)\n======\n\n> \"Some positive persisting fops we know,\n\n> Who, if once wrong, will needs be always so;\n\n> But you with pleasure own your errors past,\n\n> And make each day a critique on the last.\"\n\n> Alexander Pope.\n\nYou want to verify that your programs work. The best way to test any assumption is to try disprove it\nby experimentation and only accept your assumption when no counterexample can be found.\n\nChoosing good test-cases by hand is hard; you will be biased towards picking small test cases,\nyou will use a small sample-size, and testing known-corner cases is second best to testing\nunknown corner cases, the real source of failures. Random sampling inputs is the only\nreliable way to test.\n\nThe limiting factor to testing is your patience. Test-cases are data, and manually entering data\nis boring. Properties are predicates, which aren't as boring to write. From experience, writing\ntest-case generators is difficult & difficulty biases towards writing simple generators and\nomitting more complex cases.\n\njCheck is my attempt to add convenient, maximally-powerful testing to JavaScript. You won't deal with\ntest-case generation at all; you state the inputs a property should hold for, and jCheck verifies your\ninvariant property has no counterexamples.\n\n## Installation.\n\n#### - Dependencies\n\nTo install node.js on Ubuntu use\n\n```\nsudo add-apt-repository ppa:chris-lea/node.js\nsudo apt-get update\nsudo apt-get install nodejs\n```\n\nThen to install jCheck, go to the top-level of your project and enter;\n\n```bash\nsudo npm install rgrannell1/jCheck\n```\n\nThen, add the following boilerplate to the top of your tests:\n\n```js\nconst jCheck     = require('jCheck')\nconst over       = jCheck.over\nconst over_      = jCheck.over_\nconst describe   = jCheck.describe\nconst holdsWhen  = jCheck.holdsWhen\nconst holdsWhen_ = jCheck.holdsWhen_\nconst run        = jCheck.run\n```\n\nOr, if you always use `over_` as the entry point to your tests (which is not demanded of you)\nsimply use\n\n```js\nconst over = require('jCheck').over\n```\n\n## Language.\n\njCheck has a small vocabulary. A jCheck test binds parametres — in this case 'a' and 'b' — to\nrandom values. To prove invariants always hold true, properties such as predicates and known\nfailure functions are ran over a stream of random inputs. The tests run for a set timespan,\nand the test-cases get longer and larger over time.\n\n* **over, over_**: Bind several variables to random values.\n\n* **describe**: Describe what an assertion proves about your programs.\n\n* **holdsWhen, holdsWhen_**: When a predicate is true, assert that other predicates are true too.\n\n* **failsWhen, failsWhen_**: When a predicate is true, assert that other functions always fail.\n\n* **worksWhen, worksWhen_**: When a predicate is true, assert that other functions always run\nwithout exception.\n\n* **run**: Execute a test object.\n\nTests can be built-up in any order, though I prefer the test structure below. The exception to this\nrule is that `run( )` must be the final method call in a test; attempts to place it elsewhere will\nprematurely execute tests.\n\nIf a predicate fails (or a known-failure fails to fail) jCheck will simplify the errant\ninput to something smaller and easier to read.\n\n## Example.\n\n```js\nvar is = function (type, val) {\n\treturn toString.call(val) === '[object ' + type + ']'\n}\n\nover_(\"num\")\n\n.describe(\"test that a number double-equals itself.\")\n.holdsWhen_(\n\tfunction (num) {return is(\"Number\", num)},\n\tfunction (num) {return num == num}\n)\n\n.run()\n```\n\nThis test was designed to fail, as there are corner-cases for which `num` is\noddly not equal to itself in JavaScript.\n\n```js\nFailed! after 1 test case.\n\n\"test that a number double-equals itself.\" failed!\n\nfunction (num) {return num == num}\n\nfailed 1,007 times. Counterexample:\n\n[ NaN ]\n```\n\nIf you exclude NaN from your test-cases, you get the following message:\n\n```\n\"test that a number double-equals itself.\" passed!                            (1,603     / 7,668     )\n```\n\n## Limitations.\n\nAs with most tests, jCheck tests are prone to false negatives;\na property passing suggests it works as expected, but only exhaustive search\ncan prove this.\n\nWhile jCheck removes the problem of users selecting convenient test-cases over\nillustrative ones, the onus is on you to test useful and general properties of\nyour programs; a useless property will say little. It is still possible to write\nweak tests by excluding too many random test-cases.\n\nFinally, jCheck is at present lousy at testing polyadic functions. jCheck filters\nrandom-variables with a single predicate, rather than a predicate for each parametre.\nThis makes it take much longer to pick test-cases for functions with more than one parametre.\n\n## License.\n\njCheck is released under the MIT licence.\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Ryan Grannell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n## Versioning.\n\nAll versions post-release will be compliant with the Semantic Versioning 2.0.0 standard.\n\nhttp://semver.org/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rgrannell1/jCheck.git"
  },
  "scripts": {
    "test": "node test/test-all.js"
  },
  "version": "0.1.1"
}
